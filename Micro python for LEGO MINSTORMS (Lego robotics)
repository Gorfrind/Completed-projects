#This project was constrained to 4 extensions (2 Sensors and 2 Touch controls)
#Robot is built differently for each function
  #Func stands on wheels with sensors protruding out the front
  #Tea is stationary with protruding arm that teabag hangs from
  

#!/usr/bin/env pybricks-micropython

from pybricks import ev3brick as brick
from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor,
                                 InfraredSensor, UltrasonicSensor, GyroSensor)
from pybricks.parameters import (Port, Stop, Direction, Button, Color,
                                 SoundFile, ImageFile, Align)
from pybricks.tools import print, wait, StopWatch
from pybricks.robotics import DriveBase

#wheels
left = Motor(Port.B) 
right = Motor(Port.C)
robot = DriveBase(left, right, 56, 114)

#Sensors up/down
sensorU = UltrasonicSensor(Port.S1)
sensorD = UltrasonicSensor(Port.S4)


#Touch controls left/right
touchL = TouchSensor(Port.S2)
touchR = TouchSensor(Port.S3)

def func(): #this function moves device with both buttons pressed and moves left/right on singular button
    while touchL.pressed() and touchR.pressed():
        robot.drive(100,0)
        if sensorU.distance() < 50:
            break
        if sensorD.distance() > 150:
            break
    while touchL.pressed() and touchR.pressed()==0:
        left.run(100) 
        if sensorD.distance() > 150:
            break
        if sensorU.distance() < 50:
            break        
    while touchR.pressed() and touchL.pressed()==0:
        right.run(10)  
        if sensorD.distance() > 150:
            break
        if sensorU.distance() < 50:
            break
   
    robot.stop()
    
    
list = [x for x in range(0,500)]

def tea(): #function to lower/raise teabag for x minutes - starts with left button cancels with right button
    if touchL.pressed():
        for x in list:
            
            if x%2==0:
                holder.run(-200)
                wait(700)
                holder.stop()
            if touchR.pressed():
                break
            else:
                holder.run(200)
                wait(700)
                holder.stop()  
            

while True:
  #tea() or func()


#problem exists that it cannot be reversed a proper control pad for extra commands would fix several problems
